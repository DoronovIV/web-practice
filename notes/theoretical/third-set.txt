	List of the topics:

-- Adding the images with <img>;
-- Tables. Merging rows and columns;
-- Flex layout. Flex containers;
-- Axis. Axis alignment and leveling;

	. Of images in general and <img> (src and alt-text)

Generaly, there is probably only one valid way of adding pictures to the layout.
Therefore, of the <ing> tag.

This element holds a place for the image that is referenced in the tag. There are two main attributes for it: the 'src' and the 'alt', first one being the path to the picture (relative to the page file I presume), the second one specifies an alternate text for the image in case a user is unable to view the bitmap (due to some browser problem). The text, in that case, will be contained inside of the 'img' element.

In addition: you can put it into an 'a' tag, thus representing an image, linking another resource. The size is set directly via the css 'width' and height' properties, the tag also supports 'gif' animated images. They also say that the element supports some 'float' property, which I has not cracked yet.

	. Of Tables and merging their elements (kind of grid only for text)

The structure consists of <tr> followed by nestsd <th> or <td> tags (table-headder and table-data respecrively). Remember, that there can also be theads, body, footer, caption and etc for the tables, although I have seldom used them.

The rest is almost like in xml\xaml\whatever: spans ('colspan'/'rowspan'), alignments ('align'), borders, rules and more. The sorting is not provided by default and is typically added via JS.

About merging the elements. The colspan attribute is set in the html code directly and should be specified according to the missing 'th' or 'td' elements inside a 'tr' one. Otherwise, the code would probably not parse. The rowspan is a bit tricky, as it it's element is assosiated to the top element of the rows span.
It is a bit hard to describe for me, so I will probably need to learn it either with examples, or the very hard way itself.

	. Of Flex layout (now, the real fun begins)

This section is about layout'ing items in containers the way we want them to look, aspecially, if the sizes of the elements are dynamic.

The technology is based on two axis: main and secondary, each of which is specified by the user. By the default, the main axis is the x-one. The 'flex-direction' property corresponds to the main axis control. Can be reversed and reordered (with the 'order' reverse-priority property).

To align elements, 'justify-content' property is used (along with 'align-items' for the secondary axis), specifying 'flex-' values as well as 'space-between', 'space-around' and etc.

The items can also use the 'align-self' properties to override (or specify) their own values.
Also, 'flex-wrap' regulates the wrapping of the elements to manage line width for breaking the line.

'flex-basis' is used to stretch the items on the screen. Works in relation to the main axis.

'flex-shrink' configures the shrink of the element according to its integer value.

'flex-grow' will be determining the item flex width, also in relation with the main axis.

	. Of Axis, their alignment and leveling

Still do not know wheter they ment x/y axis or the table rows and cols axis, I think I will do both.
So the flex-container axis are presented by x and y space axis and the 'flex-direction' value. For the main one, 'justify-content' property is used. The secondary one is affected by the 'align-content' one (do not confuse it with 'align-items').
